# For available environment variables run `fastlane action x` where x - your desired action that you'd like to work on.
# Take into account that .env format doesn't support dictionaries.
# For .env rules see https://github.com/motdotla/dotenv#rules

# Gym
# Path to the workspace file
GYM_WORKSPACE=Babilonia.xcworkspace
# Path to the project file
XC_PROJECT=Babilonia.xcodeproj
# The project's scheme. Make sure it's marked as `Shared`.
GYM_SCHEME=Babilonia Development
# The configuration to use when building the app. Defaults to 'Release'.
GYM_CONFIGURATION=Release
# Method used to export the archive. Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
GYM_EXPORT_METHOD=ad-hoc
# Should the ipa file include bitcode?. Typically this should be true for the app store build
GYM_INCLUDE_BITCODE=false
# For non-App Store exports, should Xcode re-compile the app from bitcode? 
# Omitting recompilation significantly speed things up, however produces different binary.
# In theory it may lead to an uncaught bugs / crashes that QA team wasn't able to find due to different test / prod builds.
# GYM_EXPORT_COMPILE_BITCODE=true
# IMPORTANT: Setting it to true will cause Firebase to fail to symbolicate your crashlogs
GYM_EXPORT_COMPILE_BITCODE=false

# The directory in which the archive, ipa, build products should be stored in.
CI_OUTPUT_DIRECTORY=./build
# The directory for the DerivedData.
CI_DERIVED_DATA_PATH=./build/DerivedData

# GIT
# Tag to be used during build
# FL_GIT_TAG_TAG=development
# Build Number Increment. See `fastlane action (get_version_number|increment_build_number_in_plist)`. 
# Set this to some meaninful value in case there are more than 2 targets in your .xcodeproj
FL_VERSION_NUMBER_TARGET=Babilonia

# a path to a file with the devices to register. For the format of the file see the examples
FL_REGISTER_DEVICES_FILE=./fastlane/devices.txt

# Target to be used to increment build number
FL_BUILD_NUMBER_TARGET=Babilonia

# Match environment variables
# This environment variable defines which certificate type should be used for the signing. Typically you want to go with `ad-hoc` for all builds 
# and `appstore` for the appstore environment.
# For the full list of the available Enviroment variables run `fastlane action match`.
# You also may want to use separate Appfile and Matchfile. See https://docs.fastlane.tools/advanced/Appfile/#appfile.
# IMPORTANT: MAKE SURE YOU'VE SET YOUR MATCH_TYPE IN THE .env.development and other files to some value.
# Define the profile type, can be appstore, development, adhoc, development, enterprise
# MATCH_TYPE=

# The bundle identifier(s) of your app (comma-separated). For example: ...=com.bundle.id,com.bundle.id.client,com.bundle.id.server
MATCH_APP_IDENTIFIER=io.babilonia
# URL to the git repo containing all the certificates
# Here should be URL to repository with certificates and profiles (MATCH_GIT_URL)
# MATCH_GIT_URL=
# Your Apple ID Username
# Here should be Apple Developer user email (MATCH_USERNAME)
# MATCH_USERNAME=
# The ID of your Developer Portal team if you're in multiple teams. (i.e. AXTA9N39Q1)
FASTLANE_TEAM_ID=2W9JUBBNWV
# Devices Registration 
DELIVER_USER=${MATCH_USERNAME}

# scan (alias for run_tests)
# You can either set all variables via .env or go with a separate Scanfile. 
# See https://docs.fastlane.tools/actions/scan/ and https://docs.fastlane.tools/actions/scan/#scanfile for more info.
# For the full list of the available Environment variables run `fastlane action scan`
# The project's scheme. Make sure it's marked as `Shared`. Default value equal to your build scheme.
SCAN_SCHEME=${GYM_SCHEME}

# dSYMs. 
# For the full list of the available Enviroment variables run `fastlane action download_dsyms` and `fastlane action upload_symbols_to_crashlytics`
DOWNLOAD_DSYMS_OUTPUT_DIRECTORY=./.dSYMs
FL_UPLOAD_SYMBOLS_TO_CRASHLYTICS_DSYM_WORKER_THREADS=2

# Firebase
# The groups used for distribution, separated by commas
FIREBASEAPPDISTRO_GROUPS=ios-internal
# The groups used for distribution, separated by commas
# FIREBASEAPPDISTRO_GROUPS_FILE=
# Pass email addresses of testers, separated by commas
# FIREBASEAPPDISTRO_TESTERS=
# Pass email addresses of testers, separated by commas
# FIREBASEAPPDISTRO_TESTERS_FILE=

# Firebase Setup
# Local directory that will be used locally to find Google Application Credentials. Default to "google-application-credentials". Expected name for the Key would be the Project ID from the Firebase Console (i.e. myproject-23gr5.json)
GOOGLE_APPLICATION_CREDENTIALS_DIR=google-application-credentials
# SLACK_CHANNEL_NAME=...
